// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBStruct.proto

#ifndef PROTOBUF_DBStruct_2eproto__INCLUDED
#define PROTOBUF_DBStruct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace protobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_DBStruct_2eproto();
void protobuf_AssignDesc_DBStruct_2eproto();
void protobuf_ShutdownFile_DBStruct_2eproto();

class DBCharTitle;

// ===================================================================

class DBCharTitle : public ::google::protobuf::Message {
 public:
  DBCharTitle();
  virtual ~DBCharTitle();

  DBCharTitle(const DBCharTitle& from);

  inline DBCharTitle& operator=(const DBCharTitle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBCharTitle& default_instance();

  void Swap(DBCharTitle* other);

  // implements Message ----------------------------------------------

  inline DBCharTitle* New() const { return New(NULL); }

  DBCharTitle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBCharTitle& from);
  void MergeFrom(const DBCharTitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DBCharTitle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // repeated uint32 uid = 2;
  int uid_size() const;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  ::google::protobuf::uint32 uid(int index) const;
  void set_uid(int index, ::google::protobuf::uint32 value);
  void add_uid(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uid();

  // repeated string title = 3;
  int title_size() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title(int index) const;
  ::std::string* mutable_title(int index);
  void set_title(int index, const ::std::string& value);
  void set_title(int index, const char* value);
  void set_title(int index, const char* value, size_t size);
  ::std::string* add_title();
  void add_title(const ::std::string& value);
  void add_title(const char* value);
  void add_title(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& title() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_title();

  // @@protoc_insertion_point(class_scope:google.protobuf.DBCharTitle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uid_;
  mutable int _uid_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> title_;
  ::google::protobuf::int32 version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_DBStruct_2eproto();
  friend void protobuf_AssignDesc_DBStruct_2eproto();
  friend void protobuf_ShutdownFile_DBStruct_2eproto();

  void InitAsDefaultInstance();
  static DBCharTitle* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DBCharTitle

// optional int32 version = 1;
inline void DBCharTitle::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 DBCharTitle::version() const {
  // @@protoc_insertion_point(field_get:google.protobuf.DBCharTitle.version)
  return version_;
}
inline void DBCharTitle::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.DBCharTitle.version)
}

// repeated uint32 uid = 2;
inline int DBCharTitle::uid_size() const {
  return uid_.size();
}
inline void DBCharTitle::clear_uid() {
  uid_.Clear();
}
inline ::google::protobuf::uint32 DBCharTitle::uid(int index) const {
  // @@protoc_insertion_point(field_get:google.protobuf.DBCharTitle.uid)
  return uid_.Get(index);
}
inline void DBCharTitle::set_uid(int index, ::google::protobuf::uint32 value) {
  uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.protobuf.DBCharTitle.uid)
}
inline void DBCharTitle::add_uid(::google::protobuf::uint32 value) {
  uid_.Add(value);
  // @@protoc_insertion_point(field_add:google.protobuf.DBCharTitle.uid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DBCharTitle::uid() const {
  // @@protoc_insertion_point(field_list:google.protobuf.DBCharTitle.uid)
  return uid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DBCharTitle::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:google.protobuf.DBCharTitle.uid)
  return &uid_;
}

// repeated string title = 3;
inline int DBCharTitle::title_size() const {
  return title_.size();
}
inline void DBCharTitle::clear_title() {
  title_.Clear();
}
inline const ::std::string& DBCharTitle::title(int index) const {
  // @@protoc_insertion_point(field_get:google.protobuf.DBCharTitle.title)
  return title_.Get(index);
}
inline ::std::string* DBCharTitle::mutable_title(int index) {
  // @@protoc_insertion_point(field_mutable:google.protobuf.DBCharTitle.title)
  return title_.Mutable(index);
}
inline void DBCharTitle::set_title(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.protobuf.DBCharTitle.title)
  title_.Mutable(index)->assign(value);
}
inline void DBCharTitle::set_title(int index, const char* value) {
  title_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.protobuf.DBCharTitle.title)
}
inline void DBCharTitle::set_title(int index, const char* value, size_t size) {
  title_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.DBCharTitle.title)
}
inline ::std::string* DBCharTitle::add_title() {
  return title_.Add();
}
inline void DBCharTitle::add_title(const ::std::string& value) {
  title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.protobuf.DBCharTitle.title)
}
inline void DBCharTitle::add_title(const char* value) {
  title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.protobuf.DBCharTitle.title)
}
inline void DBCharTitle::add_title(const char* value, size_t size) {
  title_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.protobuf.DBCharTitle.title)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DBCharTitle::title() const {
  // @@protoc_insertion_point(field_list:google.protobuf.DBCharTitle.title)
  return title_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DBCharTitle::mutable_title() {
  // @@protoc_insertion_point(field_mutable_list:google.protobuf.DBCharTitle.title)
  return &title_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DBStruct_2eproto__INCLUDED
