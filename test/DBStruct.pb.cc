// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBStruct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DBStruct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace protobuf {
class DBCharTitleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DBCharTitle> {
} _DBCharTitle_default_instance_;

namespace protobuf_DBStruct_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCharTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCharTitle, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCharTitle, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCharTitle, title_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(DBCharTitle)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DBCharTitle_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "DBStruct.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _DBCharTitle_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DBCharTitle_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016DBStruct.proto\022\017google.protobuf\":\n\013DBC"
      "harTitle\022\017\n\007version\030\001 \001(\005\022\013\n\003uid\030\002 \003(\r\022\r"
      "\n\005title\030\003 \003(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 101);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DBStruct.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_DBStruct_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DBCharTitle::kVersionFieldNumber;
const int DBCharTitle::kUidFieldNumber;
const int DBCharTitle::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DBCharTitle::DBCharTitle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DBStruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.protobuf.DBCharTitle)
}
DBCharTitle::DBCharTitle(const DBCharTitle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      uid_(from.uid_),
      title_(from.title_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:google.protobuf.DBCharTitle)
}

void DBCharTitle::SharedCtor() {
  version_ = 0;
  _cached_size_ = 0;
}

DBCharTitle::~DBCharTitle() {
  // @@protoc_insertion_point(destructor:google.protobuf.DBCharTitle)
  SharedDtor();
}

void DBCharTitle::SharedDtor() {
}

void DBCharTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCharTitle::descriptor() {
  protobuf_DBStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DBStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DBCharTitle& DBCharTitle::default_instance() {
  protobuf_DBStruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

DBCharTitle* DBCharTitle::New(::google::protobuf::Arena* arena) const {
  DBCharTitle* n = new DBCharTitle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBCharTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.DBCharTitle)
  uid_.Clear();
  title_.Clear();
  version_ = 0;
}

bool DBCharTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.protobuf.DBCharTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_uid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string title = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title(this->title_size() - 1).data(),
            this->title(this->title_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.DBCharTitle.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.protobuf.DBCharTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.protobuf.DBCharTitle)
  return false;
#undef DO_
}

void DBCharTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.protobuf.DBCharTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // repeated uint32 uid = 2;
  if (this->uid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_uid_cached_byte_size_);
  }
  for (int i = 0, n = this->uid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->uid(i), output);
  }

  // repeated string title = 3;
  for (int i = 0, n = this->title_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title(i).data(), this->title(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.DBCharTitle.title");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.protobuf.DBCharTitle)
}

::google::protobuf::uint8* DBCharTitle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.DBCharTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // repeated uint32 uid = 2;
  if (this->uid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _uid_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->uid_, target);
  }

  // repeated string title = 3;
  for (int i = 0, n = this->title_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title(i).data(), this->title(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.DBCharTitle.title");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->title(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.DBCharTitle)
  return target;
}

size_t DBCharTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.DBCharTitle)
  size_t total_size = 0;

  // repeated uint32 uid = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->uid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _uid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string title = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->title_size());
  for (int i = 0, n = this->title_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->title(i));
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCharTitle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.protobuf.DBCharTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const DBCharTitle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DBCharTitle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.protobuf.DBCharTitle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.protobuf.DBCharTitle)
    MergeFrom(*source);
  }
}

void DBCharTitle::MergeFrom(const DBCharTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.DBCharTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_.MergeFrom(from.uid_);
  title_.MergeFrom(from.title_);
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void DBCharTitle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.protobuf.DBCharTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCharTitle::CopyFrom(const DBCharTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.DBCharTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCharTitle::IsInitialized() const {
  return true;
}

void DBCharTitle::Swap(DBCharTitle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBCharTitle::InternalSwap(DBCharTitle* other) {
  uid_.InternalSwap(&other->uid_);
  title_.InternalSwap(&other->title_);
  std::swap(version_, other->version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBCharTitle::GetMetadata() const {
  protobuf_DBStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DBStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBCharTitle

// int32 version = 1;
void DBCharTitle::clear_version() {
  version_ = 0;
}
::google::protobuf::int32 DBCharTitle::version() const {
  // @@protoc_insertion_point(field_get:google.protobuf.DBCharTitle.version)
  return version_;
}
void DBCharTitle::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.DBCharTitle.version)
}

// repeated uint32 uid = 2;
int DBCharTitle::uid_size() const {
  return uid_.size();
}
void DBCharTitle::clear_uid() {
  uid_.Clear();
}
::google::protobuf::uint32 DBCharTitle::uid(int index) const {
  // @@protoc_insertion_point(field_get:google.protobuf.DBCharTitle.uid)
  return uid_.Get(index);
}
void DBCharTitle::set_uid(int index, ::google::protobuf::uint32 value) {
  uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.protobuf.DBCharTitle.uid)
}
void DBCharTitle::add_uid(::google::protobuf::uint32 value) {
  uid_.Add(value);
  // @@protoc_insertion_point(field_add:google.protobuf.DBCharTitle.uid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DBCharTitle::uid() const {
  // @@protoc_insertion_point(field_list:google.protobuf.DBCharTitle.uid)
  return uid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DBCharTitle::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:google.protobuf.DBCharTitle.uid)
  return &uid_;
}

// repeated string title = 3;
int DBCharTitle::title_size() const {
  return title_.size();
}
void DBCharTitle::clear_title() {
  title_.Clear();
}
const ::std::string& DBCharTitle::title(int index) const {
  // @@protoc_insertion_point(field_get:google.protobuf.DBCharTitle.title)
  return title_.Get(index);
}
::std::string* DBCharTitle::mutable_title(int index) {
  // @@protoc_insertion_point(field_mutable:google.protobuf.DBCharTitle.title)
  return title_.Mutable(index);
}
void DBCharTitle::set_title(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.protobuf.DBCharTitle.title)
  title_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DBCharTitle::set_title(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.protobuf.DBCharTitle.title)
  title_.Mutable(index)->assign(std::move(value));
}
#endif
void DBCharTitle::set_title(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  title_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.protobuf.DBCharTitle.title)
}
void DBCharTitle::set_title(int index, const char* value, size_t size) {
  title_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.DBCharTitle.title)
}
::std::string* DBCharTitle::add_title() {
  // @@protoc_insertion_point(field_add_mutable:google.protobuf.DBCharTitle.title)
  return title_.Add();
}
void DBCharTitle::add_title(const ::std::string& value) {
  title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.protobuf.DBCharTitle.title)
}
#if LANG_CXX11
void DBCharTitle::add_title(::std::string&& value) {
  title_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.protobuf.DBCharTitle.title)
}
#endif
void DBCharTitle::add_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.protobuf.DBCharTitle.title)
}
void DBCharTitle::add_title(const char* value, size_t size) {
  title_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.protobuf.DBCharTitle.title)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DBCharTitle::title() const {
  // @@protoc_insertion_point(field_list:google.protobuf.DBCharTitle.title)
  return title_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DBCharTitle::mutable_title() {
  // @@protoc_insertion_point(field_mutable_list:google.protobuf.DBCharTitle.title)
  return &title_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
