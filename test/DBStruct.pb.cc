// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBStruct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DBStruct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* DBCharTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCharTitle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DBStruct_2eproto() {
  protobuf_AddDesc_DBStruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DBStruct.proto");
  GOOGLE_CHECK(file != NULL);
  DBCharTitle_descriptor_ = file->message_type(0);
  static const int DBCharTitle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCharTitle, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCharTitle, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCharTitle, title_),
  };
  DBCharTitle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DBCharTitle_descriptor_,
      DBCharTitle::default_instance_,
      DBCharTitle_offsets_,
      -1,
      -1,
      -1,
      sizeof(DBCharTitle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCharTitle, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCharTitle, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DBStruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DBCharTitle_descriptor_, &DBCharTitle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DBStruct_2eproto() {
  delete DBCharTitle::default_instance_;
  delete DBCharTitle_reflection_;
}

void protobuf_AddDesc_DBStruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016DBStruct.proto\022\017google.protobuf\":\n\013DBC"
    "harTitle\022\017\n\007version\030\001 \001(\005\022\013\n\003uid\030\002 \003(\r\022\r"
    "\n\005title\030\003 \003(\tb\006proto3", 101);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DBStruct.proto", &protobuf_RegisterTypes);
  DBCharTitle::default_instance_ = new DBCharTitle();
  DBCharTitle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DBStruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DBStruct_2eproto {
  StaticDescriptorInitializer_DBStruct_2eproto() {
    protobuf_AddDesc_DBStruct_2eproto();
  }
} static_descriptor_initializer_DBStruct_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DBCharTitle::kVersionFieldNumber;
const int DBCharTitle::kUidFieldNumber;
const int DBCharTitle::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DBCharTitle::DBCharTitle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.protobuf.DBCharTitle)
}

void DBCharTitle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DBCharTitle::DBCharTitle(const DBCharTitle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.protobuf.DBCharTitle)
}

void DBCharTitle::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
}

DBCharTitle::~DBCharTitle() {
  // @@protoc_insertion_point(destructor:google.protobuf.DBCharTitle)
  SharedDtor();
}

void DBCharTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBCharTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCharTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCharTitle_descriptor_;
}

const DBCharTitle& DBCharTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBStruct_2eproto();
  return *default_instance_;
}

DBCharTitle* DBCharTitle::default_instance_ = NULL;

DBCharTitle* DBCharTitle::New(::google::protobuf::Arena* arena) const {
  DBCharTitle* n = new DBCharTitle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBCharTitle::Clear() {
  version_ = 0;
  uid_.Clear();
  title_.Clear();
}

bool DBCharTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.protobuf.DBCharTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // repeated uint32 uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uid())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_uid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // repeated string title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title(this->title_size() - 1).data(),
            this->title(this->title_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.DBCharTitle.title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.protobuf.DBCharTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.protobuf.DBCharTitle)
  return false;
#undef DO_
}

void DBCharTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.protobuf.DBCharTitle)
  // optional int32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // repeated uint32 uid = 2;
  if (this->uid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_uid_cached_byte_size_);
  }
  for (int i = 0; i < this->uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->uid(i), output);
  }

  // repeated string title = 3;
  for (int i = 0; i < this->title_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title(i).data(), this->title(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.DBCharTitle.title");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.protobuf.DBCharTitle)
}

::google::protobuf::uint8* DBCharTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.DBCharTitle)
  // optional int32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // repeated uint32 uid = 2;
  if (this->uid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _uid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->uid(i), target);
  }

  // repeated string title = 3;
  for (int i = 0; i < this->title_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title(i).data(), this->title(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.DBCharTitle.title");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->title(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.DBCharTitle)
  return target;
}

int DBCharTitle::ByteSize() const {
  int total_size = 0;

  // optional int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // repeated uint32 uid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _uid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string title = 3;
  total_size += 1 * this->title_size();
  for (int i = 0; i < this->title_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->title(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCharTitle::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DBCharTitle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DBCharTitle>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCharTitle::MergeFrom(const DBCharTitle& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  uid_.MergeFrom(from.uid_);
  title_.MergeFrom(from.title_);
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void DBCharTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCharTitle::CopyFrom(const DBCharTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCharTitle::IsInitialized() const {

  return true;
}

void DBCharTitle::Swap(DBCharTitle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBCharTitle::InternalSwap(DBCharTitle* other) {
  std::swap(version_, other->version_);
  uid_.UnsafeArenaSwap(&other->uid_);
  title_.UnsafeArenaSwap(&other->title_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBCharTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCharTitle_descriptor_;
  metadata.reflection = DBCharTitle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBCharTitle

// optional int32 version = 1;
void DBCharTitle::clear_version() {
  version_ = 0;
}
 ::google::protobuf::int32 DBCharTitle::version() const {
  // @@protoc_insertion_point(field_get:google.protobuf.DBCharTitle.version)
  return version_;
}
 void DBCharTitle::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.DBCharTitle.version)
}

// repeated uint32 uid = 2;
int DBCharTitle::uid_size() const {
  return uid_.size();
}
void DBCharTitle::clear_uid() {
  uid_.Clear();
}
 ::google::protobuf::uint32 DBCharTitle::uid(int index) const {
  // @@protoc_insertion_point(field_get:google.protobuf.DBCharTitle.uid)
  return uid_.Get(index);
}
 void DBCharTitle::set_uid(int index, ::google::protobuf::uint32 value) {
  uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.protobuf.DBCharTitle.uid)
}
 void DBCharTitle::add_uid(::google::protobuf::uint32 value) {
  uid_.Add(value);
  // @@protoc_insertion_point(field_add:google.protobuf.DBCharTitle.uid)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DBCharTitle::uid() const {
  // @@protoc_insertion_point(field_list:google.protobuf.DBCharTitle.uid)
  return uid_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DBCharTitle::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:google.protobuf.DBCharTitle.uid)
  return &uid_;
}

// repeated string title = 3;
int DBCharTitle::title_size() const {
  return title_.size();
}
void DBCharTitle::clear_title() {
  title_.Clear();
}
 const ::std::string& DBCharTitle::title(int index) const {
  // @@protoc_insertion_point(field_get:google.protobuf.DBCharTitle.title)
  return title_.Get(index);
}
 ::std::string* DBCharTitle::mutable_title(int index) {
  // @@protoc_insertion_point(field_mutable:google.protobuf.DBCharTitle.title)
  return title_.Mutable(index);
}
 void DBCharTitle::set_title(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.protobuf.DBCharTitle.title)
  title_.Mutable(index)->assign(value);
}
 void DBCharTitle::set_title(int index, const char* value) {
  title_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.protobuf.DBCharTitle.title)
}
 void DBCharTitle::set_title(int index, const char* value, size_t size) {
  title_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.DBCharTitle.title)
}
 ::std::string* DBCharTitle::add_title() {
  return title_.Add();
}
 void DBCharTitle::add_title(const ::std::string& value) {
  title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.protobuf.DBCharTitle.title)
}
 void DBCharTitle::add_title(const char* value) {
  title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.protobuf.DBCharTitle.title)
}
 void DBCharTitle::add_title(const char* value, size_t size) {
  title_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.protobuf.DBCharTitle.title)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DBCharTitle::title() const {
  // @@protoc_insertion_point(field_list:google.protobuf.DBCharTitle.title)
  return title_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DBCharTitle::mutable_title() {
  // @@protoc_insertion_point(field_mutable_list:google.protobuf.DBCharTitle.title)
  return &title_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
